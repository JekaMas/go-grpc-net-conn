// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

package testproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Bytes struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bytes) Reset()         { *m = Bytes{} }
func (m *Bytes) String() string { return proto.CompactTextString(m) }
func (*Bytes) ProtoMessage()    {}
func (*Bytes) Descriptor() ([]byte, []int) {
	return fileDescriptor_test_b835bf38d58226ca, []int{0}
}
func (m *Bytes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bytes.Unmarshal(m, b)
}
func (m *Bytes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bytes.Marshal(b, m, deterministic)
}
func (dst *Bytes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bytes.Merge(dst, src)
}
func (m *Bytes) XXX_Size() int {
	return xxx_messageInfo_Bytes.Size(m)
}
func (m *Bytes) XXX_DiscardUnknown() {
	xxx_messageInfo_Bytes.DiscardUnknown(m)
}

var xxx_messageInfo_Bytes proto.InternalMessageInfo

func (m *Bytes) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Bytes)(nil), "testproto.Bytes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (TestService_StreamClient, error)
}

type testServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestServiceClient(cc *grpc.ClientConn) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (TestService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestService_serviceDesc.Streams[0], "/testproto.TestService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceStreamClient{stream}
	return x, nil
}

type TestService_StreamClient interface {
	Send(*Bytes) error
	Recv() (*Bytes, error)
	grpc.ClientStream
}

type testServiceStreamClient struct {
	grpc.ClientStream
}

func (x *testServiceStreamClient) Send(m *Bytes) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServiceStreamClient) Recv() (*Bytes, error) {
	m := new(Bytes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServiceServer is the server API for TestService service.
type TestServiceServer interface {
	Stream(TestService_StreamServer) error
}

func RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {
	s.RegisterService(&_TestService_serviceDesc, srv)
}

func _TestService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).Stream(&testServiceStreamServer{stream})
}

type TestService_StreamServer interface {
	Send(*Bytes) error
	Recv() (*Bytes, error)
	grpc.ServerStream
}

type testServiceStreamServer struct {
	grpc.ServerStream
}

func (x *testServiceStreamServer) Send(m *Bytes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServiceStreamServer) Recv() (*Bytes, error) {
	m := new(Bytes)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testproto.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _TestService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test.proto",
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_test_b835bf38d58226ca) }

var fileDescriptor_test_b835bf38d58226ca = []byte{
	// 112 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x49, 0x2d, 0x2e,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x04, 0xb1, 0xc1, 0x4c, 0x25, 0x69, 0x2e, 0x56,
	0xa7, 0xca, 0x92, 0xd4, 0x62, 0x21, 0x21, 0x2e, 0x96, 0x94, 0xc4, 0x92, 0x44, 0x09, 0x46, 0x05,
	0x46, 0x0d, 0x9e, 0x20, 0x30, 0xdb, 0xc8, 0x9e, 0x8b, 0x3b, 0x24, 0xb5, 0xb8, 0x24, 0x38, 0xb5,
	0xa8, 0x2c, 0x33, 0x39, 0x55, 0xc8, 0x80, 0x8b, 0x2d, 0xb8, 0xa4, 0x28, 0x35, 0x31, 0x57, 0x48,
	0x40, 0x0f, 0x6e, 0x82, 0x1e, 0x58, 0xbb, 0x14, 0x86, 0x88, 0x06, 0xa3, 0x01, 0x63, 0x12, 0x1b,
	0x58, 0xc0, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xb4, 0x86, 0x5e, 0x7d, 0x00, 0x00, 0x00,
}
